name: "Build & Publish Kodi Repository"

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    env:
      TARGET_OWNER: Thoriet-net
      TARGET_REPO: libretto-repo
      TARGET_BRANCH: main
      GIT_AUTHOR_NAME: Thoriet
      GIT_AUTHOR_EMAIL: noreply@users.noreply.github.com

    steps:
      - name: Checkout libretto-kodi
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install build deps
        run: |
          sudo apt-get update
          sudo apt-get install -y zip rsync

      - name: Package addons
        shell: bash
        run: |
          set -euo pipefail
          ROOT="$PWD"
          OUT="$ROOT/build/repo"
          mkdir -p "$OUT"

          read_attr() {
            python3 -c 'import sys,xml.etree.ElementTree as ET; r=ET.parse(sys.argv[1]).getroot(); print((r.attrib.get(sys.argv[2]) or "").strip())' "$1" "$2"
          }

          shopt -s nullglob
          for ADDON_DIR in addons/*; do
            [ -f "$ADDON_DIR/addon.xml" ] || continue
            ID=$(read_attr "$ADDON_DIR/addon.xml" id)
            VER=$(read_attr "$ADDON_DIR/addon.xml" version)
            if [ -z "$ID" ] || [ -z "$VER" ]; then
              echo "Missing id/version in $ADDON_DIR/addon.xml"
              exit 1
            fi

            echo "Packaging $ID v$VER"
            PKG_DIR="$OUT/$ID"
            mkdir -p "$PKG_DIR"
            cp "$ADDON_DIR/addon.xml" "$PKG_DIR/addon.xml"

            export COPYFILE_DISABLE=1
            (cd "$ADDON_DIR" && zip -r -X "$PKG_DIR/$ID-$VER.zip" . \
              -x "*.git*" -x "__MACOSX/*" -x "._*" -x ".DS_Store")
          done

          echo "=== build/repo ==="
          find "$OUT" -maxdepth 2 -type f | sed "s|$OUT/||"

      - name: Build addons.xml and checksum
        shell: bash
        run: |
          set -euo pipefail
          cd build/repo

          # Build a clean addons.xml by parsing each addon's addon.xml (avoids duplicate XML declarations)
          python3 - <<'PY'
import os, glob, xml.etree.ElementTree as ET, hashlib

root = ET.Element('addons')
for addon_xml in sorted(glob.glob('*/addon.xml')):
    try:
        tree = ET.parse(addon_xml)
        addon = tree.getroot()
        root.append(addon)
    except Exception as e:
        raise SystemExit(f"Failed to parse {addon_xml}: {e}")

tree = ET.ElementTree(root)
# pretty print (Python 3.9+)
try:
    ET.indent(tree, space="  ", level=0)  # type: ignore[attr-defined]
except Exception:
    pass

with open('addons.xml', 'wb') as f:
    f.write(b'<?xml version="1.0" encoding="UTF-8" standalone="yes"?>\n')
    tree.write(f, encoding='utf-8', xml_declaration=False)

# md5 checksum
md5 = hashlib.md5()
with open('addons.xml','rb') as f:
    md5.update(f.read())
with open('addons.xml.md5','w', encoding='utf-8') as f:
    f.write(md5.hexdigest())
PY

          echo "=== build/repo ==="
          ls -l .
          echo
          head -n 5 addons.xml

      - name: Checkout libretto-repo (target)
        uses: actions/checkout@v4
        with:
          repository: ${{ env.TARGET_OWNER }}/${{ env.TARGET_REPO }}
          token: ${{ secrets.LIBRETTO_REPO_TOKEN }}
          path: target
          ref: ${{ env.TARGET_BRANCH }}

      - name: Publish to libretto-repo
        env:
          GH_TOKEN: ${{ secrets.LIBRETTO_REPO_TOKEN }}
        run: |
          set -euo pipefail
          rsync -av --delete \
            --exclude='.git/' \
            --exclude='.github/' \
            --exclude='CNAME' \
            --exclude='index.html' \
            build/repo/ target/

          cd target
          git config user.name "${GIT_AUTHOR_NAME}"
          git config user.email "${GIT_AUTHOR_EMAIL}"
          if [ -n "$(git status --porcelain)" ]; then
            git add -A
            git commit -m "Update repository from libretto-kodi @ ${GITHUB_SHA}"
            git push origin "${TARGET_BRANCH}"
          else
            echo "No changes to commit."
          fi